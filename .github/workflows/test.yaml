name: RISC-V Kernel Build & Test

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: generate matrix
        id: set-matrix
        run: |
          matrix_json=$(./gen-matrix.py)
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$matrix_json" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  riscv-build:
    needs: generate-matrix
    name: Build & Test ${{ matrix.device }}-${{ matrix.arch }}-${{ matrix.toolchain }}-${{ matrix.defconfig }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}

    steps:
      - name: Checkout Linux kernel
        uses: actions/checkout@v4

      - name: Install Prerequisites
        run: |
          pip3 install tuxmake
          pip3 install tuxrun

      - name: Clone Linux kernel
        run: |
          git clone \
          --depth 1 \
          --branch ${{ matrix.branch }} \
          --single-branch \
          ${{ matrix.tree }} linux

      - name: TuxMake
        run: |
          tuxmake \
            -C linux \
            --target-arch ${{ matrix.arch }} \
            --toolchain ${{ matrix.toolchain }} \
            --kconfig ${{ matrix.defconfig }} \
            --runtime docker \
            --output-dir build/

      - name: TuxRun
        run: |
          TUXRUN_CMD="tuxrun \
            --kernel build/Image.gz \
            --tests ${{ matrix.tests }} \
            --runtime docker \
            --device ${{ matrix.device }}"
          
          if [ -f "build/modules.tar.xz" ]; then
            TUXRUN_CMD="$TUXRUN_CMD \
            --modules build/modules.tar.xz"
          fi

          eval "$TUXRUN_CMD"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.device }}-artifacts
          path: build/
